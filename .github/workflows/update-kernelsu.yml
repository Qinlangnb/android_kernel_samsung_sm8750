# 工作流名称：更新 KernelSU 源码并记录版本
name: Update KernelSU Sources & Version

on:
  # 允许你手动在 Actions 页面点击 "Run workflow" 来触发
  workflow_dispatch:
    # 定义手动触发时的输入参数
    inputs:
      branch:
        description: '要更新并推送到的分支名'
        required: true
        default: 'main'
      kernelsu_type:
        description: '选择要安装的 KernelSU 版本'
        required: true
        type: choice
        options:
          - sukisuultra
          - mksu
          - ksu

jobs:
  update-sources:
    # 任务名称
    name: Run Setup, Record Version, and Push Changes
    # 指定运行环境
    runs-on: ubuntu-latest

    # 为这个任务授予写入代码的权限
    permissions:
      contents: write

    steps:
      # 第一步：检出你的仓库代码
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 第二步：获取 KernelSU 的最新 Commit ID 并写入文件
      - name: Fetch and Record KernelSU Commit ID
        run: |
          KSU_TYPE="${{ github.event.inputs.kernelsu_type }}"
          KSU_REPO_URL=""

          if [[ "$KSU_TYPE" == "sukisuultra" ]]; then
            KSU_REPO_URL="https://github.com/SukiSU-Ultra/SukiSU-Ultra.git"
          elif [[ "$KSU_TYPE" == "mksu" ]]; then
            KSU_REPO_URL="https://github.com/5ec1cff/KernelSU.git"
          elif [[ "$KSU_TYPE" == "ksu" ]]; then
            KSU_REPO_URL="https://github.com/tiann/KernelSU.git"
          fi
          
          if [[ -n "$KSU_REPO_URL" ]]; then
            echo "正在从 $KSU_REPO_URL 获取最新的 Commit ID..."
            # 克隆 KernelSU 仓库到一个临时目录
            git clone --depth=1 "$KSU_REPO_URL" temp_ksu
            # 进入临时目录，获取短格式的 Commit ID
            COMMIT_ID=$(cd temp_ksu && git rev-parse --short HEAD)
            # 返回并清理
            rm -rf temp_ksu
            
            # 将 Commit ID 写入版本文件
            echo "$COMMIT_ID" > KERNELSU_VERSION.txt
            echo "已将 KernelSU 的 Commit ID ($COMMIT_ID) 写入 KERNELSU_VERSION.txt 文件。"
          else
            echo "当前分支不需要记录 KernelSU 版本，跳过此步骤。"
            # 如果是不相关的分支，确保版本文件不存在
            rm -f KERNELSU_VERSION.txt
          fi

      # 第三步：根据你的选择，运行对应的 KernelSU 安装脚本
      - name: Setup KernelSU
        run: |
          KSU_TYPE="${{ github.event.inputs.kernelsu_type }}"
          echo "选择的 KernelSU 类型是: $KSU_TYPE"

          if [[ "$KSU_TYPE" == "sukisuultra" ]]; then
            echo "正在运行 SukiSU-Ultra 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          elif [[ "$KSU_TYPE" == "mksu" ]]; then
            echo "正在运行 mksu 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash -s main
          elif [[ "$KSU_TYPE" == "ksu" ]]; then
            echo "正在运行官方 ksu 的 setup.sh..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          fi
          
          echo "KernelSU setup.sh 运行完毕。"

      # 第四步：提交并推送文件变动
      - name: Commit and Push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "检测到文件变动，正在提交并推送..."
            git add .
            COMMIT_MSG="ci: 更新 KernelSU (${{ github.event.inputs.kernelsu_type }})"
            # 如果版本文件存在，将 Commit ID 也加入到提交信息中
            if [ -f "KERNELSU_VERSION.txt" ]; then
              KSU_COMMIT=$(cat KERNELSU_VERSION.txt)
              COMMIT_MSG="$COMMIT_MSG at $KSU_COMMIT"
            fi
            git commit -m "$COMMIT_MSG"
            git push
            echo "推送成功！"
          else
            echo "没有检测到任何文件变动，无需提交。"
          fi
